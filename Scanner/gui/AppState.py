from import_handler import ImportDefence
with ImportDefence():
    import win32api
    from kivy.clock import Clock

from gui.ScanClasses import DummyScan


class State:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.screenManager = None
            cls._instance.currentScreen = None
            cls._instance.permission = False
            cls._instance.highlighted_scan = DummyScan()
            cls._instance.scans = [DummyScan()]
        return cls._instance

    def setScreenManager(self, screens):
        """
        The setScreenManager function is used to set the screenManager variable in the class.
        The screenManager variable is a reference to the Screen Manager object that contains all of 
        our screens. This function allows us to access this object from within any of our screens, 
        which will allow us to switch between them.
        """
        self.screenManager = screens

    def screen(self, name=None):
        """
        The screen function is used to change the current screen.
        If no argument is given, it returns the name of the current screen.
        If an argument is given, it changes to that screen and returns None.
        """
        if name is None:
            return self.currentScreen
        from gui.Hover import Hover
        Hover.enter(name)
        self.screenManager.current = name
        self.currentScreen = name

    def resize_callback(self, *_):
        """
        The resize_callback function is called from the Hover class's `._bind` function.
        The resize_callback function schedules a call to the Hover class's `scan` method, which 
        updates the position of all of its children widgets. The scan method also calls 
        the HighlightedScan class's select method, which updates its highlighted widget.
        [Docstring generated by AI]
        """
        # Called from Hover's `._bind`.
        def _resize_callback(*_):
            self.scan(self.highlighted_scan)
            self.highlighted_scan.select(0)

        Clock.schedule_once(_resize_callback, 0.15)

    def scan(self, scan):
        """
        The scan function takes a scan object and adds it to the list of scans.
        It also highlights the scan that is currently being viewed.
        """
        if scan not in self.scans:
            self.scans.append(scan)
        self.highlighted_scan = scan
        for scan in self.scans:
            scan.deselect()

    def ask_for_permission(self):
        """
        The ask_for_permission function is a simple function that asks the user if they have permission to scan the network.
        If the answer is Yes, it will only ask once, and then store their answer in memory for future use.
        Otherwise, it will keep asking each time, until permission is given.

        Returns: 
            True or False depending on whether or not they have permission
        """
        if not self.permission:
            self.permission = win32api.MessageBox(
                0,
                'Do you have legal permission to execute scans on this network?',
                'Confirm permission',
                0x00000004
            ) == 6
        return self.permission


if __name__ == '__main__':
    print("This file is responsible for the State class/object (Singleton Pattern).")
    print("It keeps track of the state in terms of:")
    print("    - Screen Manager of kivy, and which screen is currently displayed.")
    print("        All calls to change screen must pass through here.")
    print("    - Permission to scan the network is handled here.")
    print("    - Highlighting a scan button is handled here.")
